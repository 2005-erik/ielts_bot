import json
import random
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ===
TOKEN = "8492348483:AAHsdxy_3NOhfiKI-k-pwCTF_PlQ4km_2H0"  # –≤—Å—Ç–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ç–æ–∫–µ–Ω
ADMIN_ID = 6479398726  # –≤—Å—Ç–∞–≤—å —Å–≤–æ–π Telegram ID

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# === –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ===
user_levels = {}
user_languages = {}
words = []
quiz_data = []
support_waiting = set()

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
def load_data():
    global words, quiz_data
    try:
        with open("vocabulary.json", "r", encoding="utf-8") as f:
            words = json.load(f)
        with open("quiz.json", "r", encoding="utf-8") as f:
            quiz_data = json.load(f)
    except Exception as e:
        print("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:", e)

load_data()

# === –û—Å–Ω–æ–≤–Ω—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def level_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üü¢ A1", callback_data="set_A1"),
         InlineKeyboardButton(text="üü° A2", callback_data="set_A2")],
        [InlineKeyboardButton(text="üü† B1", callback_data="set_B1"),
         InlineKeyboardButton(text="üîµ B2", callback_data="set_B2")],
        [InlineKeyboardButton(text="üü£ C1", callback_data="set_C1")]
    ])

def continue_keyboard(section: str):
    """–ö–Ω–æ–ø–∫–∞ '–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å'"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"continue_{section}")]
    ])

def language_keyboard():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üá∞üáø “ö–∞–∑–∞“õ—à–∞", callback_data="lang_kk"),
         InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")]
    ])

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@dp.message(Command("start"))
async def start_command(message: types.Message):
    await message.answer(
        f"–°”ô–ª–µ–º, {message.from_user.first_name}! üëã\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:",
        reply_markup=language_keyboard()
    )

# === –í—ã–±–æ—Ä —è–∑—ã–∫–∞ ===
@dp.callback_query(lambda c: c.data.startswith("lang_"))
async def set_language(callback: types.CallbackQuery):
    lang = callback.data.split("_")[1]
    user_languages[callback.from_user.id] = lang
    if lang == "kk":
        text = "üá∞üáø –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞–¥—ã“£—ã–∑: “ö–∞–∑–∞“õ—à–∞.\n\n–î–µ“£–≥–µ–π—ñ“£—ñ–∑–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:"
    else:
        text = "üá∑üá∫ –Ø–∑—ã–∫ –≤—ã–±—Ä–∞–Ω: –†—É—Å—Å–∫–∏–π.\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å:"
    await callback.message.edit_text(text, reply_markup=level_keyboard())

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Ä–æ–≤–Ω—è ===
@dp.callback_query(lambda c: c.data.startswith("set_"))
async def set_level(callback: types.CallbackQuery):
    level = callback.data.split("_")[1]
    user_levels[callback.from_user.id] = level
    lang = user_languages.get(callback.from_user.id, "kk")

    if lang == "kk":
        msg = f"‚úÖ –°—ñ–∑–¥—ñ“£ –¥–µ“£–≥–µ–π—ñ“£—ñ–∑ –æ—Ä–Ω–∞—Ç—ã–ª–¥—ã: <b>{level}</b>\n“ö–∞–∑—ñ—Ä /vocabulary –Ω–µ–º–µ—Å–µ /quiz –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω “õ–æ–ª–¥–∞–Ω–∞ –∞–ª–∞—Å—ã–∑!"
    else:
        msg = f"‚úÖ –í–∞—à —É—Ä–æ–≤–µ–Ω—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: <b>{level}</b>\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /vocabulary –∏–ª–∏ /quiz!"
    await callback.message.edit_text(msg)

# === /help ===
@dp.message(Command("help"))
async def help_command(message: types.Message):
    text = (
        "üìò <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "/start ‚Äî –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/vocabulary ‚Äî —Å–ª–æ–≤–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è\n"
        "/quiz ‚Äî –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞\n"
        "/change_level ‚Äî —Å–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å\n"
        "/faq ‚Äî —á–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "/support ‚Äî –Ω–∞–ø–∏—Å–∞—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É\n"
        "/language ‚Äî —Å–º–µ–Ω–∏—Ç—å —è–∑—ã–∫"
    )
    await message.answer(text)

# === /language ===
@dp.message(Command("language"))
async def change_language(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ / –¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:", reply_markup=language_keyboard())

# === /faq ===
@dp.message(Command("faq"))
async def faq_command(message: types.Message):
    text = (
        "üí¨ <b>–ñ–∏—ñ “õ–æ–π—ã–ª–∞—Ç—ã–Ω —Å“±—Ä–∞“õ—Ç–∞—Ä / –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n\n"
        "1Ô∏è‚É£ –ë“±–ª –±–æ—Ç –Ω–µ “Ø—à—ñ–Ω? / –î–ª—è —á–µ–≥–æ –±–æ—Ç?\n"
        "‚û° IELTS —Å”©–∑–¥–µ—Ä—ñ–Ω –∂–∞—Ç—Ç–∞—É“ì–∞ –∂”ô–Ω–µ —Ç–µ—Å—Ç –∞—Ä“õ—ã–ª—ã —Ç–µ–∫—Å–µ—Ä—É–≥–µ –∞—Ä–Ω–∞–ª“ì–∞–Ω.\n\n"
        "2Ô∏è‚É£ –í–∏–∫—Ç–æ—Ä–∏–Ω–∞ “õ–∞–ª–∞–π –∂“±–º—ã—Å —ñ—Å—Ç–µ–π–¥—ñ? / –ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞?\n"
        "‚û° –î“±—Ä—ã—Å –∂–∞—É–∞–ø –±–µ—Ä—Å–µ“£—ñ–∑, –±–æ—Ç –∫–µ–ª–µ—Å—ñ —Å“±—Ä–∞“õ—Ç—ã –±–µ—Ä–µ–¥—ñ.\n\n"
        "3Ô∏è‚É£ “ö–∞–π—Ç–∞ –¥–µ“£–≥–µ–π–¥—ñ “õ–∞–ª–∞–π ”©–∑–≥–µ—Ä—Ç—É–≥–µ –±–æ–ª–∞–¥—ã? / –ö–∞–∫ —Å–º–µ–Ω–∏—Ç—å —É—Ä–æ–≤–µ–Ω—å?\n"
        "‚û° /change_level –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω “õ–æ–ª–¥–∞–Ω—ã“£—ã–∑.\n\n"
        "4Ô∏è‚É£ “ö–æ–ª–¥–∞—É –∫–µ—Ä–µ–∫ –ø–µ? / –ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?\n"
        "‚û° /support –∫–æ–º–∞–Ω–¥–∞—Å—ã–Ω –ø–∞–π–¥–∞–ª–∞–Ω—ã“£—ã–∑."
    )
    await message.answer(text)

# === /change_level ===
@dp.message(Command("change_level"))
async def change_level(message: types.Message):
    await message.answer("“ö–∞–π –¥–µ“£–≥–µ–π–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:", reply_markup=level_keyboard())

# === /vocabulary ===
@dp.message(Command("vocabulary"))
async def send_vocabulary(message: types.Message):
    user_id = message.from_user.id
    level = user_levels.get(user_id)

    if not level:
        await message.answer("‚ö†Ô∏è –ê–ª–¥—ã–º–µ–Ω –¥–µ“£–≥–µ–π–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å.")
        return

    level_words = [w for w in words if w["level"] == level]
    if not level_words:
        await message.answer("–ë“±–ª –¥–µ“£–≥–µ–π–≥–µ —Å”©–∑–¥–µ—Ä “õ–æ—Å—ã–ª–º–∞“ì–∞–Ω üòî")
        return

    sample = random.sample(level_words, min(3, len(level_words)))
    text = f"üìö <b>{level} –¥–µ“£–≥–µ–π—ñ–Ω–¥–µ–≥—ñ —Å”©–∑–¥–µ—Ä:</b>\n\n"
    for w in sample:
        text += f"<b>{w['word']}</b> ‚Äî {w['translation']}\n<i>{w['example']}</i>\n\n"

    await message.answer(text, reply_markup=continue_keyboard("vocabulary"))

# === /quiz ===
@dp.message(Command("quiz"))
async def quiz_command(message: types.Message):
    user_id = message.from_user.id
    level = user_levels.get(user_id)

    if not level:
        await message.answer("‚ö†Ô∏è –ê–ª–¥—ã–º–µ–Ω –¥–µ“£–≥–µ–π–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å.")
        return

    level_quiz = [q for q in quiz_data if q["level"] == level]
    if not level_quiz:
        await message.answer("‚ùå –ë“±–ª –¥–µ“£–≥–µ–π–≥–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ “õ–æ—Å—ã–ª–º–∞“ì–∞–Ω.")
        return

    q = random.choice(level_quiz)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=o, callback_data=f"ans_{o}_{q['answer']}")] for o in q["options"]
        ]
    )

    await message.answer(f"üß† {q['question']}", reply_markup=keyboard)

# === –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã ===
@dp.callback_query(lambda c: c.data.startswith("ans_"))
async def quiz_answer(callback: types.CallbackQuery):
    _, chosen, correct = callback.data.split("_", 2)
    if chosen == correct:
        await callback.message.edit_text(f"‚úÖ –î“±—Ä—ã—Å –∂–∞—É–∞–ø! <b>{correct}</b>", reply_markup=continue_keyboard("quiz"))
    else:
        await callback.message.edit_text(f"‚ùå “ö–∞—Ç–µ. –î“±—Ä—ã—Å –∂–∞—É–∞–ø: <b>{correct}</b>", reply_markup=continue_keyboard("quiz"))

# === –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è callback-–∫–Ω–æ–ø–æ–∫ ===
async def vocabulary_from_callback(user_id, message):
    level = user_levels.get(user_id)
    if not level:
        await message.edit_text("‚ö†Ô∏è –ê–ª–¥—ã–º–µ–Ω –¥–µ“£–≥–µ–π–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å.")
        return

    level_words = [w for w in words if w["level"] == level]
    if not level_words:
        await message.edit_text("–ë“±–ª –¥–µ“£–≥–µ–π–≥–µ —Å”©–∑–¥–µ—Ä “õ–æ—Å—ã–ª–º–∞“ì–∞–Ω üòî")
        return

    sample = random.sample(level_words, min(3, len(level_words)))
    text = f"üìö <b>{level} –¥–µ“£–≥–µ–π—ñ–Ω–¥–µ–≥—ñ —Å”©–∑–¥–µ—Ä:</b>\n\n"
    for w in sample:
        text += f"<b>{w['word']}</b> ‚Äî {w['translation']}\n<i>{w['example']}</i>\n\n"

    await message.edit_text(text, reply_markup=continue_keyboard("vocabulary"))

async def quiz_command_from_callback(user_id, message):
    level = user_levels.get(user_id)
    if not level:
        await message.edit_text("‚ö†Ô∏è –ê–ª–¥—ã–º–µ–Ω –¥–µ“£–≥–µ–π–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑ / –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Ä–æ–≤–µ–Ω—å.")
        return

    level_quiz = [q for q in quiz_data if q["level"] == level]
    if not level_quiz:
        await message.edit_text("‚ùå –ë“±–ª –¥–µ“£–≥–µ–π–≥–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ “õ–æ—Å—ã–ª–º–∞“ì–∞–Ω.")
        return

    q = random.choice(level_quiz)
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=o, callback_data=f"ans_{o}_{q['answer']}")] for o in q["options"]
        ]
    )

    await message.edit_text(f"üß† {q['question']}", reply_markup=keyboard)

# === –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ—Å–ª–µ —Å–ª–æ–≤ –∏–ª–∏ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã ===
@dp.callback_query(lambda c: c.data.startswith("continue_"))
async def continue_action(callback: types.CallbackQuery):
    section = callback.data.split("_")[1]
    user_id = callback.from_user.id
    message = callback.message

    if section == "vocabulary":
        await quiz_command_from_callback(user_id, message)
    elif section == "quiz":
        await vocabulary_from_callback(user_id, message)

# === /support ===
@dp.message(Command("support"))
async def support_command(message: types.Message):
    support_waiting.add(message.from_user.id)
    await message.answer("üí¨ –°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑ ‚Äî ”ô–∫—ñ–º—à—ñ–≥–µ –∂—ñ–±–µ—Ä–µ–º—ñ–Ω.")

# === –°–æ–æ–±—â–µ–Ω–∏—è –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É ===
@dp.message(lambda m: m.from_user.id not in [ADMIN_ID])
async def handle_support_message(message: types.Message):
    if message.from_user.id in support_waiting:
        await bot.send_message(
            ADMIN_ID,
            f"üì© <b>–•–∞–±–∞—Ä–ª–∞–º–∞ –æ—Ç {message.from_user.full_name}</b>\nüÜî <code>{message.from_user.id}</code>\n\n{message.text}"
        )
        await message.answer("‚úÖ –°“±—Ä–∞“ì—ã“£—ã–∑ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ. ”ò–∫—ñ–º—à—ñ–Ω—ñ“£ –∂–∞—É–∞–±—ã–Ω –∫“Ø—Ç—ñ“£—ñ–∑.")
        support_waiting.remove(message.from_user.id)

# === /reply (–æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞) ===
@dp.message(Command("reply"))
async def admin_reply(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("‚ùå –°—ñ–∑–¥–µ –±“±–ª –∫–æ–º–∞–Ω–¥–∞“ì–∞ —Ä“±“õ—Å–∞—Ç –∂–æ“õ.")
        return

    parts = message.text.split(maxsplit=2)
    if len(parts) < 3:
        await message.answer("“ö–æ–ª–¥–∞–Ω—É —Ç“Ø—Ä—ñ: /reply user_id –∂–∞—É–∞–ø_–º”ô—Ç—ñ–Ω—ñ")
        return

    user_id, reply_text = parts[1], parts[2]
    try:
        await bot.send_message(user_id, f"üí¨ <b>”ò–∫—ñ–º—à—ñ–¥–µ–Ω –∂–∞—É–∞–ø:</b>\n{reply_text}")
        await message.answer("‚úÖ –•–∞–±–∞—Ä–ª–∞–º–∞ –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ.")
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –ñ—ñ–±–µ—Ä—É “õ–∞—Ç–µ—Å—ñ: {e}")

# === –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥ Telegram (–¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫ –∫–∞–∫ —É BotFather) ===
async def set_bot_commands():
    commands = [
        BotCommand(command="start", description="–ë–∞—Å—Ç–∞—É / Start"),
        BotCommand(command="help", description="–ö”©–º–µ–∫ / Help"),
        BotCommand(command="vocabulary", description="–°”©–∑–¥–µ—Ä / Words"),
        BotCommand(command="quiz", description="–í–∏–∫—Ç–æ—Ä–∏–Ω–∞ / Quiz"),
        BotCommand(command="change_level", description="–î–µ“£–≥–µ–π–¥—ñ ”©–∑–≥–µ—Ä—Ç—É / Change level"),
        BotCommand(command="faq", description="FAQ / –°“±—Ä–∞“õ—Ç–∞—Ä"),
        BotCommand(command="support", description="“ö–æ–ª–¥–∞—É / Support"),
        BotCommand(command="language", description="–¢—ñ–ª–¥—ñ ”©–∑–≥–µ—Ä—Ç—É / Change language"),
    ]
    await bot.set_my_commands(commands)

# === –ó–∞–ø—É—Å–∫ ===
async def main():
    print("ü§ñ –ë–æ—Ç —ñ—Å–∫–µ “õ–æ—Å—ã–ª–¥—ã –∂”ô–Ω–µ –¥–∞–π—ã–Ω –∂“±–º—ã—Å“õ–∞...")
    await set_bot_commands()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
